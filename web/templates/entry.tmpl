{{ template "head.tmpl" . }}
  
  <title>{{ .title }}</title>
  <link rel="stylesheet" href="/static/css/style.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.5/ace.js" type="text/javascript" charset="utf-8"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/4.3.0/min/dropzone.min.js" type="text/javascript"></script>

</head>

<body id="droparea">

<nav class="navbar navbar-default navbar-fixed-top">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/w/default">GoPad</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav">
        <li><a href="/w/{{ .ws  }}"/>Cancel<span class="sr-only">(current)</span></a></li>
{{ if .editable }} 
        <li><a href="#" onclick="save()">Save</a></li>
{{ end }}
        <li><button class="btn btn-default navbar-btn" id="sync">Sync</button></li>
        <li><button class="btn btn-default navbar-btn" id="split3">&#188;</button></li>
        <li><button class="btn btn-default navbar-btn" id="split6">&#189;</button></li>
        <li><button class="btn btn-default navbar-btn" id="split9">&#190;</button></li>
        <li><button class="btn btn-default navbar-btn" id="split12">F</button></li>
        <li class="dropdown">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Versions<span class="caret"></span></a>
            <ul class="dropdown-menu">
{{ range $version := .versions }}
              <li><a href="{{ $version.URL }}">{{ $version.Description }}</a></li>
{{ end }}
            </ul>
        </li>    
        <li class="dropdown">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Special<span class="caret"></span></a>
            <ul class="dropdown-menu">
              <li><a href="#" id="delete">Delete</a></li>
            </ul>
        </li>    
        <li><a href="/builtin/help">Help</a></li>
    </ul>
   </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>


<div class="container">
  <div class="row">

    <form id="mainform" class="form-horizontal" method="post" action="/w/{{ .ws }}/e/{{ .entry.ID }}">
      <input type="hidden" id="title" name="Title"/>
      <input type="hidden" id="markdown" name="Markdown"/>
      
      <div class="col-md-6 nopadding" id="editordiv"><div class="col-md-12">
        <div id="editor">
        </div>
      </div></div>
      
      <div class="col-md-6 nopadding" id="render"><div class="col-md-12">
      </div></div>
    
    </form>

     <div class="row top-buffer">
       <div id="previews" class="dropzone-previews"></div>
     </div>

  </div>
</div>

<script>

var localStorageDraft = "draft";
var localStorageOldDraft ="changed"
var originalMarkdown = "{{ .entry.Markdown }}"
var updateMarkdownTimeout = undefined

var editor = ace.edit("editor");
editor.setTheme("ace/theme/github");
editor.getSession().setMode("ace/mode/markdown");
editor.setValue(originalMarkdown)

draft = localStorage[localStorageDraft]
if (draft != undefined){
    if (confirm('Unsaved draft found. Recover it?')) {
        editor.setValue(draft, -1) // moves cursor to the start
        editor.setValue(draft, 1) // moves cursor to the end
    }
}
editor.$blockScrolling = Infinity

function updateMarkdownTimer() {
    if (updateMarkdownTimeout != undefined) {
        window.clearTimeout(updateMarkdownTimeout)
    }
    updateMarkdownTimeout = window.setTimeout(renderMarkdown, 2000)
}

var onMarkdownChanged = function() {
  if (editor.getValue() != originalMarkdown){
    localStorage[localStorageDraft]=editor.getValue()
  }
  updateMarkdownTimer()
};

function updatesize() {
      var win = $( window ) 
      height = win.height() - 50
      $('#editor').css("height", height + "px");
      $('#render').css("height", height + "px");
      editor.resize();
}

$(window).on('resize', function(){
    updatesize()
});

onMarkdownChanged();
updatesize();
editor.getSession().on('change', onMarkdownChanged);

function save() {
    var content = editor.getValue()
    $("#markdown").val(content)
    $("#title").val(content.split("\n")[0]);
    localStorage.removeItem(localStorageDraft)
    $('#mainform').submit();
}

function renderMarkdown (  ) {
    $.ajax({
        type: "POST",
        url: "/render",
        data: JSON.stringify({ Markdown: editor.getValue()  }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function(data){
              $('#render').css("height", "auto")
              $("#render").html(data.html);
              $("#render").data("totalheight", $("#render").height());
              $('#render').css("height", height + "px");
              doSync(true);
	            $(".markdown table").addClass("table table-condensed");
        },
            failure: function(errMsg) {
            alert(errMsg);
        }
    });
}

{{ if .editable  }} 
$( window ).on('beforeunload',function() {
    draft = localStorage[localStorageDraft] 
    localStorage.removeItem(localStorageDraft)
    if (draft != undefined){
        var temp = draft
        setTimeout(function() {
            setTimeout(function() {
                 localStorage[localStorageDraft] = temp
            }, 1000);
        },1);
        return "Entry not saved, discard?"
    }
});
{{ end }}



/* delete  -------------------------------------------- */

$("#delete").click( function () {
    if (confirm("Are you sure to DELETE this entry?")) {
        jQuery.post("/w/{{ .ws  }}/e/{{ .entry.ID  }}/delete");
        localStorage.removeItem(localStorageDraft)
        window.location.href = "/w/{{ .ws  }}"
    }
})

/* split -------------------------------------------- */

var splitPositions = [3,6,9,12]

function splitScreen(columns) {

    if (columns > 0 && columns < 12 ) {
      $("#editordiv").attr("display","block")
      $("#editordiv").attr("class","col-md-"+columns+" nopadding")
      $("#render").attr("display","block")
      $("#render").attr("class","col-md-"+(12-columns)+" nopadding")
    }

    if (columns == 12) {
      $("#editordiv").attr("display","block")
      $("#editordiv").attr("class","col-md-12 nopadding")
      $("#render").attr("display","none")
      $("#render").attr("class","col-md-0 nopadding")
    }

    for ( index = 0 ; index < splitPositions.length; index++  ) {
        var sp = splitPositions[index] 
        if (sp == columns) {
          $("#split"+sp).removeClass("btn-default");
          $("#split"+sp).addClass("btn-primary");
        } else {
          $("#split"+sp).removeClass("btn-primary");
          $("#split"+sp).addClass("btn-default");
        }
    }
}

function createSplitScreenCall(columns) {
    return function() { splitScreen(columns); }
}

for ( index = 0 ; index < splitPositions.length; index++  ) {
    var sp = splitPositions[index] 
     $("#split"+sp).click(createSplitScreenCall(sp))
}

splitScreen(6)

/* drag & drop -------------------------------------- */

{{ if .editable  }} 

new Dropzone(document.body, { // Make the whole body a dropzone
    url: "/w/{{ .ws }}/e/{{ .entry.ID }}/f",
    previewsContainer: "#previews", // Define the container to display the previews
    clickable: "#previews", // Define the element that should be used as click trigger to select files.
    addedfile: function(file) { console.log(file);  },
    error: function(file, response) {
        alert(response.error); 
    },
    success: function(file) {
        json = jQuery.parseJSON(file.xhr.response)
        if ( json.ico != "" ) {
            markdown = "[![]("+json.ico+")]("+json.path+")"+json.name
        } else {
            markdown ="![]("+json.path+")"
        }
        editor.insert(markdown);
    }
});

{{ end }}

/* Cursor sync stuff --------------------------------------- */

var lastSelected = null
var sync = true

$("#sync").click( function() {
    setSync(!sync);
})

function setSync(val) {
    sync = val
    if (sync) {
        $("#sync").removeClass("btn-default");
        $("#sync").addClass("btn-primary");
    } else {
        $("#sync").removeClass("btn-primary");
        $("#sync").addClass("btn-default");
    }
}

editor.session.selection.on("changeCursor", function(e) {
  doSync(false);
})

function doSync(fullredraw) {

  if (!sync) {
    return
  }

  menubarheight = 50

  // unselect the last element

  if (lastSelected != null && !fullredraw) {
    lastSelected.css("background-color","#fff")  
  }

  // Find the element that belongs to this line

  var lineno = editor.selection.getCursor().row
  var el = null
  elements = $("*[line-from]")
  for (i=0 ; i< elements.length ; i ++) {
    if ( lineno >= parseInt(elements[i].attributes["line-from"].value)  &&
         lineno <= parseInt(elements[i].attributes["line-to"].value) ) {
  
        el = $(elements[i])
        break
    }
  }

  // If element found
  if (el != null ) {

    // select the element
    el.css("background-color","#eee")  
    lastSelected = el

    var renderSize = Math.round($("#render").height())
    var scrollPos = Math.round($('#render').scrollTop())
    var elementPos = Math.round(el.position().top)

    scrollTo = null

    if (elementPos < 0 ) {
      scrollTo = scrollPos - ( renderSize - elementPos ) - renderSize*0.25

      if (scrollTo < renderSize) {
        scrollTo = 0
      }

    } else if (elementPos > renderSize ) {
      scrollTo = scrollPos + ( elementPos - renderSize ) + renderSize*0.25

    } 

    if (scrollTo != null ) {
      $('#render').animate({
        scrollTop: scrollTo
      }, 'fast');
    }

  }
}

setSync(true);



</script>

{{ template "tail.tmpl" . }}
