<!DOCTYPE html>
<html lang="en">
<head>
  <title>{{ .title }}</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="{{ .prefix  }}/static/css/bootstrap.min.css">
  <link rel="stylesheet" href="{{ .prefix  }}/static/css/dropzone.min.css">
  <script src="{{ .prefix  }}/static/js/jquery.min.js"></script>
  <script src="{{ .prefix  }}/static/js/bootstrap.min.js"></script>
  <script src="{{ .prefix  }}/static/js/ace.js" type="text/javascript" charset="utf-8"></script>
  <script src="{{ .prefix  }}/static/js/dropzone.min.js" type="text/javascript"></script>

</head>

<body id="droparea">

<style type="text/css" media="screen">

#editor { 
    position: relative;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}

.top-buffer { margin-top:20px;  }

.input-large {
    height: 44px !important;
    margin-bottom: 10px !important;
    line-height: 30px !important;
    padding: 11px 19px !important;
    font-size: 30px !important;
    -webkit-border-radius: 6px;
    -moz-border-radius: 6px;
    border-radius: 6px;
}


</style>

{{ template "menu.tmpl" }}

<div class="container">
  <div class="row">
    <div class="col-md-12">

    <form class="form-horizontal" method="post" action="{{ .prefix }}/entries/{{ .entry.ID }}">
    <input class="form-control input-large" id="title" name="Title" value="{{ .entry.Title }}" />
    
    <h2>Markdown</h2>
    
    <input type="hidden" id="markdown" name="Markdown"/>
    <div class="col-md-6">
       <div id="editor">
       </div>
    </div>
    <div class="col-md-6" id="render">
    </div>
    </div>
  </div>
  <div class="row top-buffer">
<!-- Button -->
    <div class="col-md-12">
        <button  name="btnsave" id="btnsave" class="btn btn-primary btn-lg">Save</button>
         <button name="btnback" class="btn btn-normal btn-lg">Back</button>
    </div>
</div>
    </form>

  <div class="row top-buffer">
<div id="previews" class="dropzone-previews"></div>
</div>
  </div>

<script>

var localStorageDraft = "edit-{{ .entry.ID }}-value";
var originalMarkdown = "{{ .entry.Markdown }}"
var updateMarkdownTimeout = undefined

var editor = ace.edit("editor");
editor.setTheme("ace/theme/github");
editor.getSession().setMode("ace/mode/markdown");
editor.setValue(originalMarkdown)
editor.$blockScrolling = Infinity

function updateMarkdownTimer() {
    if (updateMarkdownTimeout != undefined) {
        window.clearTimeout(updateMarkdownTimeout)
    }
    updateMarkdownTimeout = window.setTimeout(renderMarkdown, 2000)
}

var heightUpdateFunction = function() {
  localStorage[localStorageDraft]=editor.getValue()
  var newHeight =editor.getSession().getScreenLength()* editor.renderer.lineHeight
  $('#editor').height(newHeight.toString() + "px");
  $('#editor-section').height(newHeight.toString() + "px");
  editor.resize();
  updateMarkdownTimer()
};

// Set initial size to match initial content
heightUpdateFunction();
editor.getSession().on('change', heightUpdateFunction);

$( "#btnsave" ).click(function() {
    $("#markdown").val(editor.getValue())
    localStorage.removeItem(localStorageDraft)
});

function renderMarkdown (  ) {
    $.ajax({
        type: "POST",
        url: "{{ .prefix  }}/markdown",
        data: JSON.stringify({ Markdown: editor.getValue()  }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function(data){
              $("#render").html(data.html);
        },
            failure: function(errMsg) {
            alert(errMsg);
        }
    });
}

$( window ).on('beforeunload',function() {
  draft = localStorage[localStorageDraft] 
  if (draft != undefined && draft != originalMarkdown){
    return "Entry not saved, discard?"
  }
});

$( window ).on('unload',function() {
  localStorage.removeItem(localStorageDraft)
});

new Dropzone(document.body, { // Make the whole body a dropzone
    url: "/entries/{{ .entry.ID }}/file",
    previewsContainer: "#previews", // Define the container to display the previews
    clickable: "#previews", // Define the element that should be used as click trigger to select files.
    addedfile: function(file) { console.log(file);  },
    error: function(file, response) {
        alert(response.error); 
    },
    success: function(file) {
        json = jQuery.parseJSON(file.xhr.response)
        if ( json.ico != "" ) {
            markdown = "[![]("+json.ico+")]("+json.path+")"+json.name
        } else {
            markdown ="![]("+json.path+")"
        }
        editor.insert(markdown);
    }

});

</script>

</body>
</html>

